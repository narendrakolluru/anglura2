"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _abstractTaskLoader = require("../abstractTaskLoader");

var _abstractTaskLoader2 = _interopRequireDefault(_abstractTaskLoader);

var _config = require("../config");

var _config2 = _interopRequireDefault(_config);

var _connectHistoryApiFallback = require("connect-history-api-fallback");

var _connectHistoryApiFallback2 = _interopRequireDefault(_connectHistoryApiFallback);

var _runSequence = require("run-sequence");

var _runSequence2 = _interopRequireDefault(_runSequence);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var browserSync = require("browser-sync").create(_config2.default.webServerNames.dist);
var proxyMiddleware = require("http-proxy-middleware");

var ServeDistTaskLoader = function (_AbstractTaskLoader) {
    _inherits(ServeDistTaskLoader, _AbstractTaskLoader);

    function ServeDistTaskLoader() {
        _classCallCheck(this, ServeDistTaskLoader);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(ServeDistTaskLoader).apply(this, arguments));
    }

    _createClass(ServeDistTaskLoader, [{
        key: "registerTask",
        value: function registerTask(gulp) {
            _get(Object.getPrototypeOf(ServeDistTaskLoader.prototype), "registerTask", this).call(this, gulp);

            var run = _runSequence2.default.use(gulp);
            var proxy = null;
            var middleware = [(0, _connectHistoryApiFallback2.default)(), function (req, res, next) {
                res.setHeader("Access-Control-Allow-Origin", "*");
                next();
            }];

            if (gulp.options.proxy) {
                proxy = proxyMiddleware(gulp.options.proxy.api, {
                    target: gulp.options.proxy.target + ":" + gulp.options.proxy.port,
                    changeOrigin: true });

                middleware.unshift(proxy);
            }

            var startBrowserSync = function startBrowserSync() {
                browserSync.init({
                    notify: false,

                    logPrefix: "NBWA",

                    server: {
                        baseDir: _config2.default.webServerFolders.dist,

                        middleware: middleware
                    },
                    reloadDelay: 1000,
                    reloadDebounce: 1000
                });
            };

            gulp.task("serve-dist", "Build and serve the production version (i.e., 'dist' folder contents", function () {
                var tasks = ["default"];
                if (gulp.options.proxy) {
                    tasks.unshift("proxy");
                }
                return run(tasks, startBrowserSync);
            });
        }
    }]);

    return ServeDistTaskLoader;
}(_abstractTaskLoader2.default);

module.exports = new ServeDistTaskLoader();