"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _abstractTaskLoader = require("../abstractTaskLoader");

var _abstractTaskLoader2 = _interopRequireDefault(_abstractTaskLoader);

var _config = require("../config");

var _config2 = _interopRequireDefault(_config);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _gulpUtil = require("gulp-util");

var _gulpUtil2 = _interopRequireDefault(_gulpUtil);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ScriptsJavaScriptDistTaskLoader = function (_AbstractTaskLoader) {
    _inherits(ScriptsJavaScriptDistTaskLoader, _AbstractTaskLoader);

    function ScriptsJavaScriptDistTaskLoader() {
        _classCallCheck(this, ScriptsJavaScriptDistTaskLoader);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(ScriptsJavaScriptDistTaskLoader).apply(this, arguments));
    }

    _createClass(ScriptsJavaScriptDistTaskLoader, [{
        key: "registerTask",
        value: function registerTask(gulp) {
            _get(Object.getPrototypeOf(ScriptsJavaScriptDistTaskLoader.prototype), "registerTask", this).call(this, gulp);

            gulp.task("scripts-javascript-dist", "Package all JavaScript code for production", function () {
                var minifyProductionJSBundle = true;

                if (typeof gulp.options.minifyProductionJSBundle !== "undefined") {
                    minifyProductionJSBundle = gulp.options.minifyProductionJSBundle;

                    if (minifyProductionJSBundle === false) {
                        _gulpUtil2.default.log("The production JS bundle will NOT be minified!");
                    }
                }

                var mangleProductionJSBundle = true;

                if (typeof gulp.options.mangleProductionJSBundle !== "undefined") {
                    mangleProductionJSBundle = gulp.options.mangleProductionJSBundle;

                    if (mangleProductionJSBundle === false) {
                        _gulpUtil2.default.log("The production JS bundle will NOT be mangled!");
                    }
                }

                var useJSPM = true;

                if (typeof gulp.options.useJSPM !== "undefined") {
                    useJSPM = gulp.options.useJSPM;

                    if (useJSPM === false) {
                        _gulpUtil2.default.log("The production JS bundle will be built using SystemJS-builder rather than with JSPM!");
                    }
                }

                var distEntryPoint = _config2.default.javascript.srcDist;

                if (typeof gulp.options.distEntryPoint !== "undefined") {
                    distEntryPoint = _path2.default.join(_config2.default.folders.temp, gulp.options.distEntryPoint);
                    _gulpUtil2.default.log("The production JS bundle entry point has been customized: ", distEntryPoint);
                }

                var systemjsConfigurationFile = _config2.default.files.systemjsConfigDefault;

                if (typeof gulp.options.systemjsConfigurationFile !== "undefined") {
                    systemjsConfigurationFile = gulp.options.systemjsConfigurationFile;
                    _gulpUtil2.default.log("The SystemJS configuration file has been customized: ", systemjsConfigurationFile);
                }

                var bundleConfiguration = {
                    sourceMaps: false,
                    minify: minifyProductionJSBundle,
                    mangle: mangleProductionJSBundle,

                    globalDefs: {
                        DEBUG: false
                    }
                };

                if (useJSPM === true) {
                    var jspm = require("jspm");

                    jspm.setPackagePath(".");

                    return jspm.bundleSFX(distEntryPoint, _config2.default.javascript.destDist, bundleConfiguration);
                } else {
                    var Builder = require("systemjs-builder");
                    var systemjsBuilder = new Builder(".", systemjsConfigurationFile);

                    return systemjsBuilder.buildStatic(distEntryPoint, _config2.default.javascript.destDist, bundleConfiguration);
                }
            });
        }
    }]);

    return ScriptsJavaScriptDistTaskLoader;
}(_abstractTaskLoader2.default);

module.exports = new ScriptsJavaScriptDistTaskLoader();