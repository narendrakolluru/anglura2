"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _abstractTaskLoader = require("../abstractTaskLoader");

var _abstractTaskLoader2 = _interopRequireDefault(_abstractTaskLoader);

var _config = require("../config");

var _config2 = _interopRequireDefault(_config);

var _path = require("path");

var path = _interopRequireWildcard(_path);

var _gulpHtmlReplace = require("gulp-html-replace");

var _gulpHtmlReplace2 = _interopRequireDefault(_gulpHtmlReplace);

var _gulpInlineSource = require("gulp-inline-source");

var _gulpInlineSource2 = _interopRequireDefault(_gulpInlineSource);

var _gulpIf = require("gulp-if");

var _gulpIf2 = _interopRequireDefault(_gulpIf);

var _gulpMinifyHtml = require("gulp-minify-html");

var _gulpMinifyHtml2 = _interopRequireDefault(_gulpMinifyHtml);

var _gulpSize = require("gulp-size");

var _gulpSize2 = _interopRequireDefault(_gulpSize);

var _gulpUtil = require("gulp-util");

var _gulpUtil2 = _interopRequireDefault(_gulpUtil);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HtmlTaskLoader = function (_AbstractTaskLoader) {
    _inherits(HtmlTaskLoader, _AbstractTaskLoader);

    function HtmlTaskLoader() {
        _classCallCheck(this, HtmlTaskLoader);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(HtmlTaskLoader).apply(this, arguments));
    }

    _createClass(HtmlTaskLoader, [{
        key: "registerTask",
        value: function registerTask(gulp) {
            _get(Object.getPrototypeOf(HtmlTaskLoader.prototype), "registerTask", this).call(this, gulp);

            gulp.task("html", "Optimize HTML", function () {
                var minifyInlinedScripts = true;

                if (typeof gulp.options.minifyProductionJSBundle !== "undefined") {
                    minifyInlinedScripts = gulp.options.minifyProductionJSBundle;

                    if (minifyInlinedScripts === false) {
                        _gulpUtil2.default.log("The inlined scripts will NOT be minified!");
                    }
                }

                var minifyProductionHTML = true;

                if (typeof gulp.options.minifyProductionHTML !== "undefined") {
                    minifyProductionHTML = gulp.options.minifyProductionHTML;

                    if (minifyProductionHTML === false) {
                        _gulpUtil2.default.log("The HTML will NOT be minified!");
                    }
                }

                var src = null;

                if (gulp.options.folders) {
                    src = [gulp.options.folders.app + _config2.default.globs.html];
                } else {
                    src = _config2.default.html.src;
                }

                return gulp.plumbedSrc(src).pipe((0, _gulpHtmlReplace2.default)({
                    "css-vendor": _config2.default.styles.finalVendorCssBundlePath,
                    "css-bundle": _config2.default.styles.finalCssBundlePath,
                    "js-app": _config2.default.javascript.finalJsBundlePath
                })).pipe((0, _gulpInlineSource2.default)({
                    compress: minifyInlinedScripts,
                    rootpath: path.resolve(".") })).pipe((0, _gulpIf2.default)(minifyProductionHTML && _config2.default.files.any + _config2.default.extensions.html, (0, _gulpMinifyHtml2.default)({
                    quotes: true }))).pipe(gulp.dest(_config2.default.html.dest)).pipe((0, _gulpSize2.default)({
                    title: "html"
                }));
            });
        }
    }]);

    return HtmlTaskLoader;
}(_abstractTaskLoader2.default);

module.exports = new HtmlTaskLoader();