"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _abstractTaskLoader = require("../abstractTaskLoader");

var _abstractTaskLoader2 = _interopRequireDefault(_abstractTaskLoader);

var _config = require("../config");

var _config2 = _interopRequireDefault(_config);

var _utils = require("../utils");

var _utils2 = _interopRequireDefault(_utils);

var _connectHistoryApiFallback = require("connect-history-api-fallback");

var _connectHistoryApiFallback2 = _interopRequireDefault(_connectHistoryApiFallback);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var browserSync = require("browser-sync").create(_config2.default.webServerNames.dev);
var proxyMiddleware = require("http-proxy-middleware");
var runSequence = require("run-sequence");

var ServeTaskLoader = function (_AbstractTaskLoader) {
    _inherits(ServeTaskLoader, _AbstractTaskLoader);

    function ServeTaskLoader() {
        _classCallCheck(this, ServeTaskLoader);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(ServeTaskLoader).apply(this, arguments));
    }

    _createClass(ServeTaskLoader, [{
        key: "registerTask",
        value: function registerTask(gulp) {
            _get(Object.getPrototypeOf(ServeTaskLoader.prototype), "registerTask", this).call(this, gulp);

            runSequence = runSequence.use(gulp);
            gulp.task("serve-scripts-typescript", "Transpile TypeScript to ES5 and reload the browser (this task should only be called during serve)", ["prepare-serve-scripts-typescript"], function () {
                return browserSync.reload();
            });

            gulp.task("prepare-serve-scripts-typescript", "Transpile TypeScript to ES5 and generate sourcemaps", ["ts-lint"], function (callback) {
                return runSequence("scripts-typescript", callback);
            });

            gulp.task("serve-scripts-javascript", "Transpile JavaScript to ES5 and reload the browser (this task should only be called during serve)", ["prepare-serve-scripts-javascript"], function () {
                return browserSync.reload();
            });
            gulp.task("prepare-serve-scripts-javascript", "Transpile JavaScript to ES5 and generate sourcemaps", ["check-js-style", "check-js-quality"], function (callback) {
                return runSequence("scripts-javascript", callback);
            });

            var proxy = null;
            var middleware = [(0, _connectHistoryApiFallback2.default)(), function (req, res, next) {
                res.setHeader("Access-Control-Allow-Origin", "*");
                next();
            }];

            if (gulp.options.proxy) {
                proxy = proxyMiddleware(gulp.options.proxy.api, {
                    target: gulp.options.proxy.target + ":" + gulp.options.proxy.port,
                    changeOrigin: true });

                middleware.unshift(proxy);
            }

            var baseDir = null;

            if (gulp.options.folders) {
                baseDir = _config2.default.webServerFolders.dev.concat([gulp.options.folders.app]);
            } else {
                baseDir = _config2.default.webServerFolders.dev;
            }

            var browserSyncOptions = {
                notify: false,

                logPrefix: "MWD",
                ghostMode: {
                    clicks: false,
                    forms: false,
                    scroll: false
                },
                server: {
                    baseDir: baseDir,

                    middleware: middleware
                } };

            var html = null;
            var styles = _utils2.default.getCssFolder(gulp, _config2.default);
            var typescript = null;
            var javascript = null;
            var images = null;

            if (gulp.options.folders) {
                html = [gulp.options.folders.app + _config2.default.globs.html];
                typescript = [gulp.options.folders.app + _config2.default.globs.scripts.typescript];
                javascript = [gulp.options.folders.app + _config2.default.globs.scripts.javascript];
                images = [gulp.options.folders.app + _config2.default.globs.images];
            } else {
                html = _config2.default.html.src;
                typescript = _config2.default.typescript.srcAppOnly;
                javascript = _config2.default.javascript.src;
                images = _config2.default.images.src;
            }

            var startBrowserSync = function startBrowserSync() {
                browserSync.init(_utils2.default.mergeOptions(browserSyncOptions, gulp.options.browserSync));

                gulp.watch(html).on("change", browserSync.reload);
                gulp.watch(styles, ["sass-lint", "styles"]);
                gulp.watch(typescript, ["serve-scripts-typescript"]);
                gulp.watch(javascript, ["serve-scripts-javascript"]);
                gulp.watch(images).on("change", browserSync.reload);
            };

            gulp.task("serve", "Watch files for changes and rebuild/reload automagically", function () {
                runSequence("prepare-serve", startBrowserSync);
            });

            gulp.task("prepare-serve", "Do all the necessary preparatory work for the serve task", function () {
                if (gulp.options.proxy) {
                    return runSequence(["clean", "ts-lint", "check-js-style", "check-js-quality", "proxy"], ["scripts-typescript", "scripts-javascript", "sass-lint", "styles", "validate-package-json"]);
                } else {
                    return runSequence(["clean", "ts-lint", "check-js-style", "check-js-quality"], ["scripts-typescript", "scripts-javascript", "sass-lint", "styles", "validate-package-json"]);
                }
            });
        }
    }]);

    return ServeTaskLoader;
}(_abstractTaskLoader2.default);

module.exports = new ServeTaskLoader();