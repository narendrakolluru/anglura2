"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _abstractTaskLoader = require("../abstractTaskLoader");

var _abstractTaskLoader2 = _interopRequireDefault(_abstractTaskLoader);

var _config = require("../config");

var _config2 = _interopRequireDefault(_config);

var _utils = require("../utils");

var _utils2 = _interopRequireDefault(_utils);

var _gulpSass = require("gulp-sass");

var _gulpSass2 = _interopRequireDefault(_gulpSass);

var _gulpSourcemaps = require("gulp-sourcemaps");

var _gulpSourcemaps2 = _interopRequireDefault(_gulpSourcemaps);

var _gulpAutoprefixer = require("gulp-autoprefixer");

var _gulpAutoprefixer2 = _interopRequireDefault(_gulpAutoprefixer);

var _gulpIf = require("gulp-if");

var _gulpIf2 = _interopRequireDefault(_gulpIf);

var _gulpSize = require("gulp-size");

var _gulpSize2 = _interopRequireDefault(_gulpSize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var browserSync = require("browser-sync").get(_config2.default.webServerNames.dev);

var StylesTaskLoader = function (_AbstractTaskLoader) {
    _inherits(StylesTaskLoader, _AbstractTaskLoader);

    function StylesTaskLoader() {
        _classCallCheck(this, StylesTaskLoader);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(StylesTaskLoader).apply(this, arguments));
    }

    _createClass(StylesTaskLoader, [{
        key: "registerTask",
        value: function registerTask(gulp) {
            _get(Object.getPrototypeOf(StylesTaskLoader.prototype), "registerTask", this).call(this, gulp);

            gulp.task("styles", "Compile, add vendor prefixes and generate sourcemaps", function () {
                var src = _utils2.default.getCssFolder(gulp, _config2.default);

                return gulp.plumbedSrc(src).pipe(_gulpSourcemaps2.default.init({})).pipe((0, _gulpSass2.default)({
                    style: "compressed"
                }).on("error", _gulpSass2.default.logError)).pipe(_gulpSourcemaps2.default.write(".", {
                    includeContent: false,
                    sourceRoot: "/" })).pipe((0, _gulpIf2.default)([_config2.default.extensions.css, "!*.map"], (0, _gulpAutoprefixer2.default)({
                    browsers: _config2.default.autoprefixerBrowsers }))).pipe(gulp.dest(_config2.default.styles.dest)).pipe((0, _gulpIf2.default)(browserSync.active, browserSync.stream({
                    once: true,
                    stream: true
                }))).pipe((0, _gulpSize2.default)({
                    title: "styles"
                }));
            });
        }
    }]);

    return StylesTaskLoader;
}(_abstractTaskLoader2.default);

module.exports = new StylesTaskLoader();