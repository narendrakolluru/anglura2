

"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _requireDir = require("require-dir");

var _requireDir2 = _interopRequireDefault(_requireDir);

var _utils = require("./gulp/utils");

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TasksLoader = function () {
    function TasksLoader() {
        _classCallCheck(this, TasksLoader);
    }

    _createClass(TasksLoader, [{
        key: "registerTasks",
        value: function registerTasks(inputGulp, inputOptions) {
            var gulp = inputGulp || require("gulp");
            var options = inputOptions || {};

            gulp = _utils2.default.configureGulpObject(gulp, options);
            var loadedModules = (0, _requireDir2.default)("./gulp/tasks", {
                recurse: false
            });

            for (var key in loadedModules) {
                if (loadedModules.hasOwnProperty(key)) {
                    var loadedModule = loadedModules[key];

                    if (loadedModule.registerTask) {
                        loadedModule.registerTask(gulp);
                    } else {
                        throw new TypeError("The following module does not expose the expected interface: " + key);
                    }
                }
            }
        }
    }]);

    return TasksLoader;
}();

exports.default = new TasksLoader();